geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1.25, 1.5, 1.25, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1.2, 1.4, 1.2, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1.1, 1.2, 1.1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.2, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.15, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.15, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.87,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.15, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.87,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, .8, 1.15, .8, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.87,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, .8, 1.15, .8, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.8,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.15, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.8,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(.8, 1, 1.2, 1, .8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  +
theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(0.8, 1, 1.2, 1, 0.8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=0.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  #+
#theme_void()
#install.packages('showtext', dependencies = TRUE)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Comfortaa", "Comfortaa")
## Automatically use showtext to render text for future devices
showtext_auto()
ggplot() +
geom_polygon(data = data.frame(x = c(8, 8, 55, 100, 100), y = c(0.8, 1, 1.2, 1, 0.8)),
aes(x = x, y = y), fill = "#FF6600") +
annotate("text", x=53, y=0.89,
label="Abode",
family = "Comfortaa",
size= 35,
color = "white")  #+
#theme_void()
paths <- c(
"./images/IMG_6667.PNG",
"./images/IMG_6666.PNG",
"./images/IMG_6738.PNG",
"./images/IMG_6739.PNG",
"./images/IMG_6740.PNG",
"./images/IMG_6742.PNG",
"./images/IMG_6743.PNG",
"./images/IMG_6744.PNG",
"./images/IMG_6745.PNG"
)
library(slickR)
slickR(obj=paths) +
settings(dots = TRUE)
library(cowplot)
library(slickR)
paths <- c(
"./images/IMG_6667.PNG",
"./images/IMG_6666.PNG",
"./images/IMG_6738.PNG",
"./images/IMG_6739.PNG",
"./images/IMG_6740.PNG",
"./images/IMG_6742.PNG",
"./images/IMG_6743.PNG",
"./images/IMG_6744.PNG",
"./images/IMG_6745.PNG"
)
slickR(obj=paths, height = 200, width = "95%") +
settings(dots = TRUE)
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Code_practice/R_Practice/Shiny/RealEstateValuation/RealEstateValuation')
library(ggplot2)
library(scales)
# define function to forecast property value over time
ValueForecast <- function(x, y, numYears){
previousYearValue = x # Units Sold for the previous year
annualgrowth = y  # growth per year in units sold
numYears = numYears # number of years to forecast
RealEstateValue <- c()
for (i in seq(1, numYears)){
nextYearValue <- previousYearValue*annualgrowth # step 3: calculate next year's unit sales based on annual growth from previous year
# return the value
RealEstateValue <- c(RealEstateValue, nextYearValue) #record the result of the Units Sold projection to list from earlier loop iterations of Units Sold projections
previousYearValue <- nextYearValue #update the previous year units sold to reflect the projected units sold
}
ProjectedValue <- as.data.frame(RealEstateValue)
return(ProjectedValue)
}
# start with total value sold for first year, which we'll pick
ValueYear1 <- 2000000
# create a data frame of year and value in year1
Year1Value_df <- data.frame(year = 1, RealEstateValue = ValueYear1)
#Calculate projected 5 year growth in property value, projected to grow at 10% per year
Value_5yearProjection <- ValueForecast(ValueYear1, # the unit sales in year 1
1.05, # this is 5% growth per year
19 # projecting four years out, since year1 is also a projection
)
Value_5yearProjection
Value_5yearProjection
Value_5yearProjection_df <- Value_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity") +
labs(title="predicted real estate value") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma)
p
Value_5yearProjection_df <- data.frame(Value_5yearProjection)
Value_5yearProjection_df %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity") +
labs(title="predicted real estate value") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma)
p
Value_5yearProjection_df <- data.frame(Value_5yearProjection)
Value_5yearProjection_df <- Value_5yearProjection_df %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity") +
labs(title="predicted real estate value") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma)
p
#Value_5yearProjection_df <- data.frame(Value_5yearProjection)
Value_5yearProjection_df <- Value_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity") +
labs(title="predicted real estate value") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma)
p
class(Value_5yearProjection_df)
value = tail(Value_5yearProjection_df, n = 1)
value
value = tail(Value_5yearProjection_df$RealEstateValue, n = 1)
value
class(value)
knitr::include_graphics("NaomiHouse.webp")
# start with total value sold for first year, which we'll pick
ACValueYear1 <- 1000000
AnnualGrowth <- 1.05
numYears <- 20
# create a data frame of year and value in year1
Year1Value_df <- data.frame(year = 1, RealEstateValue = ACValueYear1)
#Calculate projected 5 year growth in property value, projected to grow at 10% per year
Value_5yearProjection <- ValueForecast(ACValueYear1, # the unit sales in year 1
AnnualGrowth, # this is 5% growth per year
numYears # projecting four years out, since year1 is also a projection
)
#Value_5yearProjection_df <- data.frame(Value_5yearProjection)
Value_5yearProjection_df <- Value_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity", lwd=1) +
labs(title="Estimated real estate value over time") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma) +
theme(plot.title = element_text(hjust = 0.5))
p
# sum equity
TotalEquity <- sum((tail(ACValue_5yearProjection_df$RealEstateValue, n = 1) + tail(Value_5yearProjection_df$RealEstateValue, n = 1))
# sum equity
TotalEquity <- sum(tail(ACValue_5yearProjection_df$RealEstateValue, n = 1) + tail(Value_5yearProjection_df$RealEstateValue, n = 1))
# start with total value sold for first year, which we'll pick
ACValueYear1 <- 1000000
AnnualGrowth <- 1.05
numYears <- 20
# create a data frame of year and value in year1
Year1Value_df <- data.frame(year = 1, RealEstateValue = ACValueYear1)
#Calculate projected 5 year growth in property value, projected to grow at 10% per year
ACValue_5yearProjection <- ValueForecast(ACValueYear1, # the unit sales in year 1
AnnualGrowth, # this is 5% growth per year
numYears # projecting four years out, since year1 is also a projection
)
#Value_5yearProjection_df <- data.frame(Value_5yearProjection)
ACValue_5yearProjection_df <- ACValue_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = ACValue_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity", lwd=1) +
labs(title="Estimated real estate value over time") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma) +
theme(plot.title = element_text(hjust = 0.5))
p
# sum equity
TotalEquity <- sum(tail(ACValue_5yearProjection_df$RealEstateValue, n = 1) + tail(Value_5yearProjection_df$RealEstateValue, n = 1))
# start with total value sold for first year, which we'll pick
HomeValueYear1 <- 1500000
AnnualGrowth <- 1.05
numYears <- 20
# create a data frame of year and value in year1
HomeYear1Value_df <- data.frame(year = 1, RealEstateValue = HomeValueYear1)
#Calculate projected 5 year growth in property value, projected to grow at 10% per year
HomeValue_5yearProjection <- ValueForecast(HomeValueYear1, # the unit sales in year 1
AnnualGrowth, # this is 5% growth per year
numYears # projecting four years out, since year1 is also a projection
)
#Value_5yearProjection_df <- data.frame(Value_5yearProjection)
HomeValue_5yearProjection_df <- HomeValue_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = HomeValue_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity", lwd=1) +
labs(title="Estimated real estate value over time") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma) +
theme(plot.title = element_text(hjust = 0.5))
p
library(dplyr)
library(ggplot2)
library(scales)
# define function to forecast property value over time
ValueForecast <- function(x, y, numYears){
previousYearValue = x # Units Sold for the previous year
annualgrowth = y  # growth per year in units sold
numYears = numYears # number of years to forecast
RealEstateValue <- c()
for (i in seq(1, numYears)){
nextYearValue <- previousYearValue*annualgrowth # step 3: calculate next year's unit sales based on annual growth from previous year
# return the value
RealEstateValue <- c(RealEstateValue, nextYearValue) #record the result of the Units Sold projection to list from earlier loop iterations of Units Sold projections
previousYearValue <- nextYearValue #update the previous year units sold to reflect the projected units sold
}
ProjectedValue <- as.data.frame(RealEstateValue)
return(ProjectedValue)
}
# start with total value sold for first year, which we'll pick
NaomiValueYear1 <- 2000000
AnnualGrowth <- 1.05
numYears <- 20
# create a data frame of year and value in year1
Year1Value_df <- data.frame(year = 1, RealEstateValue = NaomiValueYear1)
#Calculate projected 5 year growth in property value, projected to grow at 10% per year
Value_5yearProjection <- ValueForecast(NaomiValueYear1, # the unit sales in year 1
AnnualGrowth, # this is 5% growth per year
numYears # projecting four years out, since year1 is also a projection
)
#Value_5yearProjection_df <- data.frame(Value_5yearProjection)
Value_5yearProjection_df <- Value_5yearProjection %>%
mutate(year = row_number())
p <- ggplot(data = Value_5yearProjection_df, aes(x=year, y=RealEstateValue)) +
geom_line(stat="identity", lwd=1) +
labs(title="Estimated real estate value over time") +
scale_y_continuous(limits=c(1000000, 6000000), labels = scales::comma) +
theme(plot.title = element_text(hjust = 0.5))
p
shiny::runApp('Desktop/Edwardsiella_NGS_data/EdwardsiellaBase/ShinyWebApp')
runApp('Desktop/Edwardsiella_NGS_data/EdwardsiellaBase/ShinyWebApp')
setwd("~/Desktop/Edwardsiella_NGS_data/EdwardsiellaBase/ShinyWebApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NYTimesCovidUSA <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
NYTimesCovidUSA$date <- ymd(NYTimesCovidUSA$date)
NYTimesCovidUSA %>%
mutate(
new_cases = cases - lag(cases),
ave_new_cases = rollmean(new_cases, 7, na.pad=TRUE, align="right")) %>%
filter(!is.na(new_cases), !is.na(ave_new_cases)) %>%
ggplot(aes(x = date, group = 1)) +
scale_y_continuous(labels = scales::comma) +
geom_bar(aes(y = new_cases), stat = "identity", fill = "lightblue") +
geom_line(aes(y = ave_new_cases), color ="red") +
ggtitle("Daily new cases of Covid-19 in USA") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
library(gridExtra)
library(readr)
library(usdata) # for converting state names to state abbreviations
#library(tidycovid19)
library(tidyverse)
library(ggrepel)
library(gghighlight)
library(zoo)
library(socviz) # %nin%
library(scales)
library(lubridate)
library(hrbrthemes)
library(ggmap) # mapping
library(geofacet) # for geofacet USA states plot
extrafont::loadfonts(quiet=TRUE)
NYTimesCovidUSA <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
NYTimesCovidUSA$date <- ymd(NYTimesCovidUSA$date)
NYTimesCovidUSA %>%
mutate(
new_cases = cases - lag(cases),
ave_new_cases = rollmean(new_cases, 7, na.pad=TRUE, align="right")) %>%
filter(!is.na(new_cases), !is.na(ave_new_cases)) %>%
ggplot(aes(x = date, group = 1)) +
scale_y_continuous(labels = scales::comma) +
geom_bar(aes(y = new_cases), stat = "identity", fill = "lightblue") +
geom_line(aes(y = ave_new_cases), color ="red") +
ggtitle("Daily new cases of Covid-19 in USA") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
library(networkD3)
URL <- paste0("https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata/miserables.json")
MisJson <- jsonlite::fromJSON(URL)
ValjeanInds <- which(MisJson$links == 11, arr = TRUE)[, 1]
ValjeanCols <- ifelse(1:nrow(MisJson$links) %in% ValjeanInds, "#bf3eff", "#666")
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", Group = "group", opacity = 0.8,
linkColour = ValjeanCols, arrows = TRUE, zoom = TRUE)
View(MisJson)
library(visNetwork)
nodes <- read.csv("~/Desktop/nodes.csv")
edges <- read.csv("~/Desktop/edges.csv")
nodesdf <- data.frame(nodes)
edgesdf <- data.frame(edges)
# keeping all parent node attributes
visNetwork(nodesdf, edgesdf) %>% visEdges(arrows = "to") %>%
visOptions(collapse = TRUE) %>%
visInteraction(navigationButtons = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nodes <- read.csv("Data/EdFoodWeb_nodes.csv")
nodes <- read.csv("Data/EdFoodWeb_nodes.csv")
edges <- read.csv("Data/EdFoodWeb_edges.csv")
nodesdf <- data.frame(nodes)
edgesdf <- data.frame(edges)
p <- visNetwork(nodesdf, edgesdf) %>% visEdges(arrows = "to") %>%
visOptions(collapse = TRUE) %>%
visInteraction(navigationButtons = TRUE)
p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
